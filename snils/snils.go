package snils

import (
	"fmt"
	"strconv"
	"strings"
	"unicode"
)

// Правила расчета контрольной суммы СНИЛС

// Допустимые символы - цифры, пробел, дефис.
// Проверяется на валидность контрольным числом.
// СНИЛС имеет вид "XXX-XXX-XXX YY", где XXX-XXX-XXX - номер, а YY - контрольное число.

// Контрольное число СНИЛС рассчитывается следующим образом:
// * Каждая цифра СНИЛС умножается на номер своей позиции (позиции отсчитываются с конца);
// * Полученные произведения суммируются;
// * Если сумма меньше 100, то контрольное число равно самой сумме;
// * Если сумма равна 100 или 101, то контрольное число равно 00;
// * Если сумма больше 101, то сумма делится нацело на 101 и контрольное число определяется
// остатком от деления аналогично предыдущим двум пунктам.

// Дополнительная проверка:
// * В номере XXX-XXX-XXX не может присутствовать одна и та же цифра три раза подряд.
// Дефисы при этой проверке игнорируются,
// т.е. неверными будут все нижеследующие примеры СНИЛСов:
// XXX-222-XXX YY
// XX2-22X-XXX YY

func validate(number string) bool {

	// Допустимые символы - цифры, пробел, дефис.
	for _, c := range number {
		if unicode.IsDigit(c) || c == ' ' || c == '-' {
			continue
		}
		return false
	}
	replacer := strings.NewReplacer(" ", "", "-", "")
	number = replacer.Replace(number)
	if len(number) != 11 {
		return false
	}

	// Дополнительная проверка:
	// * В номере XXX-XXX-XXX не может присутствовать одна и та же цифра три раза подряд.
	// Дефисы при этой проверке игнорируются,
	// т.е. неверными будут все нижеследующие примеры СНИЛСов:
	// XXX-222-XXX YY
	// XX2-22X-XXX YY
	currentChar := rune(number[0])
	var countChar int
	for _, c := range number[:9] {
		if c == currentChar {
			countChar++
		}
		if c != currentChar {
			currentChar = c
			countChar = 1
		}
		if countChar == 3 {
			return false
		}
	}

	// Контрольное число СНИЛС рассчитывается следующим образом:
	// * Каждая цифра СНИЛС умножается на номер своей позиции (позиции отсчитываются с конца);
	// * Полученные произведения суммируются;
	totalSum := 0
	for i, c := range number[:9] {
		totalSum += (9 - i) * (int)(c-'0')
	}

	rightSum := calcSum(totalSum)

	sumFromNumber, _ := strconv.Atoi(number[9:])
	fmt.Println(rightSum, sumFromNumber)
	return rightSum == sumFromNumber
}

// * Если сумма меньше 100, то контрольное число равно самой сумме;
// * Если сумма равна 100 или 101, то контрольное число равно 00;
// * Если сумма больше 101, то сумма делится нацело на 101 и контрольное число определяется
// остатком от деления аналогично предыдущим двум пунктам.
func calcSum(sum int) int {
	if sum < 100 {
		return sum
	}
	if sum == 100 || sum == 101 {
		return 0
	}
	return calcSum(sum % 101)
}
